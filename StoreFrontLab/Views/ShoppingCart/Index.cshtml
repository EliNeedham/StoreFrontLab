@* strongly typed view *@
@model Dictionary<int, StoreFrontLab.Models.ShoppingCartViewModel>
@{
    ViewBag.Title = "Shopping Cart";

    decimal? cartTotal = 0;
    int totalCountOfItems = 0;
}

<p class="text-right">
    @Html.ActionLink("Back to Shopping", "Index", "Bikes", null, new { @class = "btn btn-info" })
</p>

<h2 class="text-center">@ViewBag.Title</h2>


@if (Model.Count == 0)
{
    <p class="alert alert-warning">
        @ViewBag.Message
    </p>
}
else
{
    <table class="table">
        <tr>
            <th>Bike Model</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
            <th></th>
        </tr>
        @foreach (var item in Model)
        {
            //when calling on an item in a dictionary you have to specify KEY or VALUE
            <tr>
                <td>
                    @* model represents the whole shopping cart,  *@
                <img src="~/Content/imgstore/bikes/t_@item.Value.Product.BikeImage" alt="Bike Image" title="@item.Value.Product.BikeModel" />
            </td>
            <td>
                @* provide a space for the user to update the qty *@
                @using (Html.BeginForm("UpdateCart", "ShoppingCart", FormMethod.Post))
                {
                    //name attbt   value
                    @Html.Hidden("bikeID", item.Value.Product.BikeID)
                    //name attbt, value, HTML attributes - class style id
                    @Html.TextBox("qty", item.Value.Qty, new { @class = "from-control", @style = "max-width:50px; display: inline;" })
                    <input type="submit" value="Update Quantity" class="btn btn-info" />
                }

                @{
                    //calculate the running total number of items in the cart
                    totalCountOfItems += item.Value.Qty;
                }

            </td>
            <td>
                @* data formatting in the view *@
                @string.Format($"{item.Value.Product.Price:c}")
            </td>
            <td>
                @* calculate linetotal and update the runnign total variable for each row *@
                @{ // ? on decimal means it could have a null value - nullability.
                    decimal? lineTotal = item.Value.Product.Price * item.Value.Qty;
                    cartTotal += lineTotal;
                }
                @string.Format($"{lineTotal:c}")
            </td>
            <td>
                @*Remove from cart functionality*@
                @*                  text                action          route value *@
                @Html.ActionLink("Remove from cart", "RemoveFromCart", new { id = item.Value.Product.BikeID })
                @* we do not have to specify the controller bc Index (the view we are on) is in the same controller as RemoveFromCart *@
            </td>
        </tr>
    }
    </table>
    <p class="alert alert-success text-center" style="font-size:1.25em">
        You have @totalCountOfItems item@(totalCountOfItems > 1 ? "s" : "") in your cart. Your total before shipping and taxes is @string.Format($"{cartTotal:c}")
    </p>
}


